[{"category":"getting-started","content":" NPE - short of NullPointerException TMI - short of Twitch Message Interface, when it is implemented to glitch-chat module. Reactive - asynchronicious non-blocking programming. Rate Limits - preventing constantly spam interactions from querying, like TMI, Helix. Pagination - always are be when query have multiple entries. There is a difference of Cursor and Offset Chat Rooms - every channels does have additional chats called Chat Rooms, which can be previewed differently and have different join permissions; e.g., general, moderators-only, or subscribers-only Twitch Staff - Moderator/Administrator of the Twitch Platform, and employeer aswell.  ","description":"","keywords":[],"ref":"/wiki/getting-started/glossary/","tags":null,"title":"Glossary","weight":-400},{"category":"faq","content":" Supporting Android Since Play Console change Target API level we can now provide solution for new Android devices. This means 8.0+ devices are be supported.\nKotlin Support Those solutions are be provided aswell. But you can use it without no worries about additonal solutions for our library for your Android app.\n","description":"","keywords":[],"ref":"/wiki/faq/android-compatibility/","tags":null,"title":"Android Compatibility","weight":-300},{"category":"getting-started","content":" Before Starting Download Java Development Kit (JDK) Install it and configure environmental variables: JAVA_HOME if not exist, create and adding to PATH - $JAVA_HOME/bin.\n JDK8. JDK11.  Integrated Development Environment (IDE) Download Apache Netbeans 9.0 Netbeans 8.2 NetBeans is an open-source Integrated Development Environment (IDE) for developing with Java, PHP, C++, and other programming languages. NetBeans is also referred to as a platform of modular components used for developing Java desktop applications.\nSetup Soon :tm:\n","description":"","keywords":[],"ref":"/wiki/getting-started/netbeans/","tags":null,"title":"Netbeans Setup","weight":-300},{"category":"basic-tutorials","content":" All endpoints will returns a Mono or Flux response. Other way will be commented inside the example.  Currently Extension Broadcast System is not supported on this library. In the next releases will be supporting aswell.  Getting Started Before start we need initialize client first at all. After initialization we can now getting into the next step\nInitialization Client GlitchPubSub client = GlitchPubSub.builder(client) // register topic after initialize connection  .activateTopic(Topic.videoPlayback(\u0026#34;\u0026lt;channel_name\u0026gt;\u0026#34;)) // register topic and don\u0026#39;t activate it  .setTopic(Topic.following(\u0026lt;channel_id\u0026gt;)) .build(); // or .buildAsync() which returns Mono\u0026lt;GlitchPubSub\u0026gt;  // connecting chat.connect().block(); /* returns void - block() is required to execute connections */ Listening who\u0026rsquo;s following a channel client.listenOn(FollowEvent.class).subscribe(event -\u0026gt; { System.out.println(String.format(\u0026#34;%s is following the channel!\u0026#34;, event.getData().getUsername())); });","description":"","keywords":[],"ref":"/wiki/basic-tutorials/pubsub/","tags":null,"title":"PubSub","weight":-300},{"category":"getting-started","content":" Before Starting Download Java Development Kit (JDK) Install it and configure environmental variables: JAVA_HOME if not exist, create and adding to PATH - $JAVA_HOME/bin.\n JDK8. JDK11.  Integrated Development Environment (IDE) Download Eclipse is an open-source platform of extensible software development application frameworks, tools and run times that was initially created as a Java-based Integrated Development Environment (IDE).\nEclipse\u0026rsquo;s runtime system is based on a collection of Equinox Open Services Gateway Initiative (OSGi) runtime-built open-source projects covering Java IDE, static/dynamic languages, thick/thin-client and server-side frameworks, modeling/business reporting and embedded/mobile systems.\nSetup Soon :tm:\n","description":"","keywords":[],"ref":"/wiki/getting-started/eclipse/","tags":null,"title":"Eclipse Setup","weight":-200},{"category":"essential-knowledge","content":"All presented screenshots are be only on view. Presented Client ID and Client Secret would not to be worked.   Go to https://dev.twitch.tv/  Sign up with Twitch account   Go to Your Dashboard  Get to the Apps tab or press View Apps  Register Your Application  Fill the all of those fields.  After filling fields press Create  Press Manage to get your created application details  Now you can copy Client ID. To generate Client Secret, press New Secret  Confirm this alerted question:  And now you can copy Client Secret too   If you are updating your website, make sure if your OAuth Redirect URL is setted up correctly.  ","description":"","keywords":[],"ref":"/wiki/essential-knowledge/getting-client-id-and-secret/","tags":null,"title":"Getting Client ID and Secret","weight":-200},{"category":"miscellaneous","content":" How to configure your IDE Configuring IDE is important to starting contribute. We do like preferred use IntelliJ IDEA. Considering other IDE is possible if:\n Have annotation processor support like plugins, extension etc. Supporting Gradle project Having installed Git (optional supported as plugin or extension) Supporting Java Development Kit 8 and late  Prepare your IDE Before start we need a Java Development Kit 8 (JDK8). Install it and configure environmental variables: JAVA_HOME if not exist, create and adding to PATH - $JAVA_HOME/bin.\nIntelliJ IDEA Jetbrains provides a most popular IDE for JVM referenced programming language. It is a great choice to starting journey with this IDE. That\u0026rsquo;s why we recommending it for people who\u0026rsquo;s like programming in Java.\nBefore starting configuration this IDE we need download IDE and Lombok plugin (you can install it from the Settings menu)\n Import project using link for git project.\nGo to File \u0026gt; New \u0026gt; Project from Version Control \u0026gt; Git Paste your link in URL field and press Clone to start cloning repository.\n In bottom-right corner will shows pop-out which inform the Gradle project has been founded and ready to link. Click Import Gradle Project.\nIf you lost this pop-out you can find them in Event Log (default: bottom-right tab)\n Then will shows a window Import Module from Gradle.\n Uncheck Create separate module per source set - this one makes issue in annotation processing. Select Use gradle \u0026lsquo;wrapper\u0026rsquo; task configuration - cause we provide gradle wrapper for this repository. We not recommend using a different gradle version cause about tasks works with bundled wrapper. Set Gradle JVM if module couldn\u0026rsquo;t found JAVA_HOME variable we should add it manually using three dots (...) button. Press OK and wait till IDE finished importing dependencies   Next step is install Lombok Plugin.\n Final step is Annotation Processors\nProject will not import all configurations to the IDE. We should do manually. Same way like the Lombok (File \u0026gt; Settings) but we going to Build, Execution, Deployment \u0026gt; Compiler \u0026gt; Annotation Processors.\n Check Enable annotation processing Select Module content root Change sources directory to:  Production sources directory: build\\generated\\source\\apt\\main Test sources directory: build\\generated\\source\\apt\\test  Press OK    Eclipse Eclipse is another choice for advancements programming and old known IDE before IntelliJ. Before starting configuration this IDE we need download IDE and install Lombok using installer.\n After installation Eclipse, try install a Project Lombok. Import project using link for git project.\nFor this step we needed make sure if we have booth extensions required for working of this project.\n EGit - Git Integration for Eclipse Buildship Gradle Integration   If IDE have it implemented in installation we can proceed to the steps below:\n Go to File \u0026gt; Import and select \u0026gt; Git \u0026gt; Projects from Git. Press Next \u0026gt; and select Clone URI with pressing Next \u0026gt;. Paste your link in URI field and press Next \u0026gt;. Select specific branches what you need to work with them and press Next \u0026gt;. To start cloning repository specify Directory, Initial branch (recommending select dev branch) and Remote name. I think you need change only directory because of rest is find and we will leave this. Final step is select Import as general project. If we trying use Import using the New Project wizard, Gradle extension will not allow us to import, only creation. That\u0026rsquo;s all of them. Import as new general project and press Finish to start. On the right side ide you will find a distinctive a Gradle elephant logo. Click him to expand Gradle Task View tab. You will find this message There are no Gradl;e projects in the current workspace. Import a Gradle project to see its tasks in the Gradle Task View. Click to Import a Gradle Project Specify a Project root directory if this field is empty. Sometimes we need specify a Working sets. Create them one using New button, and choose Resource. Before finishing and selecting our project we must naming a Working set name. Than click Finish.   Final step is activate Annotation Processing\n Right click on the project and select Properties. Open Java Compiler \u0026gt; Annotation Processing. Check Enable annotation processing. Change sources directory to:  Generated source directory: build\\generated\\source\\apt\\main Generated test source directory: build\\generated\\source\\apt\\test  Confirm changes pressing Apply and Close    Netbeans NetBeans IDE is a free and open source integrated development environment for application development on Windows, Mac, Linux, and Solaris operating systems. The IDE simplifies the development of web, enterprise, desktop, and mobile applications that use the Java and HTML5 platforms. The IDE also offers support for the development of PHP and C/C++ applications. Project is associate by Oracle Corporation.\nTo get started we need first a Gradle Support plugin and Downloaded Project Lombok jar package.\n Before start install Gradle Support plugin first.\nYou can use in menu Tools \u0026gt; Plugins. In Available Plugins tab type Gradle Support in search field. Mark them and click Install. Shows Installer window, accept a licensing conditions to continue installations.\n Now it\u0026rsquo;s time to import our project.\n Go to Team \u0026gt; Git \u0026gt; Clone Paste your link into Repository URL field and press Next \u0026gt;. Of course before that you can specified Destination Folder for cloning our project. Choose branches for listening. If you want it. Very important!!! You need listen a dev branch because we are pushing there before pushing into master branch and create Release. In next step select Checkout Branch to dev, and click Finish After cloned project will show information alert when asking us when we want open this project. We will do pressing Open Project   Now IDE will automatically finds a Gradle project and will execute tasks for preparing project to start coding. No configuration of Annotation processing, no more adding Lombok plugins stuffs like. Everything is on the Gradle Plugin.\nHow to contribute to Glitch Of course you can contribute to our repository in 3 ways:\n Creating Issue Joining to our Discord Server Create Pull Request  Issue All your ideas, features, bug reports, etc. must be documented in following comments on issue tab. Questions in issue are not welcome. Use Discord server below to asking developers for your question.\nDiscord Server Your problem is a hardest to reproduce? Having a questions, how to and where? Come, join to our Discord Server\nPull Requests So, you are thinking about sending a pull request? Awesome! But\u0026hellip; before starting on your pull request, you should read up on the pull request comment.\nBefore starting pull request make sure if:\n All your code will be subject to the project\u0026rsquo;s licence, in this case MIT. Your code follows a style requirements mentioned below, and you didn\u0026rsquo;t modified project style (ex. indentation style, bracket style, naming, comments, etc). Rewrites of certain systems are kindly welcome too. Your pull-request must be created ONLY against the dev branch!  Style Requirements  All instanced objects should have getters and setters using Project Lombok (where reasonable) All object instances, methods and fields must be documented for getting sure what does things are doing. All implementation subjects are be optional to documenting. Any classes with Impl suffix are be ignorable from compiler. Documented notes (backslashes // or slashed stars /* */) is optional into inside methods for getting sure what does things are doing. If some parts of code is unofficial and they are using non-documented part of Twitch API, you must mark them using @Unofficial(\u0026quot;\u0026lt;link to source\u0026gt;\u0026quot;) annotation adding inside the source. Documenting object instances (classes, interfaces, enums) must have a same format below:  /** * {Your short description} * \u0026lt;p\u0026gt; * {Your longest description} * @author {Full name or Username} [{Github link or e-mail address}] * @version %I%, %G% * @since {next minor version (eg. 0.11.0)} */ public class Example {}","description":"","keywords":[],"ref":"/wiki/miscellaneous/guidelines/","tags":null,"title":"Guidelines","weight":-200},{"category":"basic-tutorials","content":" All endpoints will returns a Mono or Flux response. Other way will be commented inside the example.  Some part of the events is not done yet. This documentations shows only example, they might be changed in time.  Getting Started Before start we need initialize client first at all. After initialization we can now getting into the next step\nInitialize Message Intereface API GlitchChat chat = GlitchChat.builder(client) .botCredentials(\u0026#34;\u0026lt;access_token\u0026gt;\u0026#34;, \u0026#34;\u0026lt;refresh_token\u0026gt;\u0026#34;) .build(); // or .buildAsync() which returns Mono\u0026lt;GlitchChat\u0026gt;  // connecting chat.connect().block(); /* returns void - block() is required to execute connections */ What\u0026rsquo;s next? The next step is create communications between channel and bot enviornment. This examples below will you meet them every time.\nJoin / Leave channel This example presenting how to join channel, when you have initialized bot from builder (see: how to initialize message interface)\n For e.g. We wana join to twitch channel.\n chat.join(\u0026#34;twitch\u0026#34;); Another sample is leaving bot from channel\n For e.g. We wana leaving already joined twitch channel.\n chat.getChannel(\u0026#34;twitch\u0026#34;).leave().subscribe(); /* subscribe)_ is necessarily to initialize leaving channel */ Get Chat message chat.on(MessageEvent.class).subscribe(event -\u0026gt; { if (event.getMessage().equalsIgnoreCase(\u0026#34;!ping\u0026#34;)) { event.sendMessage(Mono.just(String.format(\u0026#34;%s, Pong!\u0026#34;, event.getUser().getMentionable()))); } }); Listen all moderation actions chat.on(ModerationEvent.class).subscribe(event -\u0026gt; { if (event.getAction() == ModerationAction.BAN) { event.sendMessage(Mono.just(String.format(\u0026#34;%s has been banned from this channel!\u0026#34;, event.getUser().getMentionable()))); } }); Using Commands API Soon :tm:\n","description":"","keywords":[],"ref":"/wiki/basic-tutorials/chat/","tags":null,"title":"Message Interface","weight":-200},{"category":"faq","content":" What is it? Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as network protocols.\nReactive programming is a declarative programming paradigm concerned with data streams and the propagation of change. With this paradigm it is possible to express static (e.g., arrays) or dynamic (e.g., event emitters) data streams with ease, and also communicate that an inferred dependency within the associated execution model exists, which facilitates the automatic propagation of the changed data flow.\nWhy Project Reactor? Project Reactor is a fully non-blocking reactive programming foundation for the JVM, with efficient demand management (in the form of managing \u0026ldquo;backpressure\u0026rdquo;). It integrates directly with the Java 8 functional APIs, notably CompletableFuture, Stream, and Duration. It offers composable asynchronous sequence APIs Flux (for [N] elements) and Mono (for [0|1] elements), extensively implementing the Reactive Streams specification.\nHow to use it? The solutions helps provide non-blocking I/O operations for Request and Response. Using OkHttpClient we can now operate quering using Project Reactor. here is example for booth solutions. Anything is on documentation of thsi project.\n","description":"","keywords":[],"ref":"/wiki/faq/reactive-streams/","tags":null,"title":"Reactive Streams","weight":-200},{"category":"basic-tutorials","content":" title: Message Interface layout: wiki_base\nweight: -200 All endpoints will returns a Mono or Flux response. Other way will be commented inside the example.  Some part of the events is not done yet. This documentations shows only example, they might be changed in time.  Getting Started Before start we need initialize client first at all. After initialization we can now getting into the next step\nInitialize API GlitchKraken kraken = GlitchKraken.create(client); // same way with Helix GlitchHelix helix = GlitchHelix.create(client); What\u0026rsquo;s next? All services are be separated to specific API type, so better watch out which object you are importing. Each services are be called using example below:\nkraken.use(ChatService.class); // same way with Helix kraken.use(UserService.class); All endpoints like this will returns Mono object to handling into reactive response.\nGet user To getting Twitch user we need use UserService (each one are be separated to specific API)\n For e.g. We wana find twitch user.\n Poseidon\u0026rsquo;s way (Kraken) kraken.use(UserService.class).flatMapMany(service -\u0026gt; service.getUsers(\u0026#34;twitch\u0026#34;)).next() // gets first element we can use multiple usernames like this:\nkraken.use(UserService.class).flatMapMany(service -\u0026gt; service.getUsers(\u0026#34;twitch\u0026#34;, \u0026#34;summit1g\u0026#34;, \u0026#34;izakooo\u0026#34;, \u0026#34;ninja\u0026#34;)) Way with Helix First parameter #getUserByLogin() is always a Credential. If we want expose email address we need a Authorize user with Scope.USER_READ_EMAIL. Otherwise User#getEmail() will always returns null if we not provide Credential with specific mentioned Scope.\nhelix.use(UserService.class).flatMapMany(service -\u0026gt; service.getUsersByLogin(credential, \u0026#34;twitch\u0026#34;)).next() // gets first element we can use multiple usernames like this:\nhelix.use(UserService.class).flatMapMany(service -\u0026gt; service .getUsersByLogin(null, \u0026#34;twitch\u0026#34;, \u0026#34;summit1g\u0026#34;, \u0026#34;izakooo\u0026#34;, \u0026#34;ninja\u0026#34;)) // if we don\u0026#39;t needs their e-mails just add null on the first parameter Getting User using his ID Same rules like aboved, but you provides Long id\u0026rsquo;s not String. To formatting Long data use Long#parseLong(String)\nKraken kraken.use(UserService.class).flatMap(service -\u0026gt; service.getUserById(12826)) Helix helix.use(UserService.class).flatMapMany(service -\u0026gt; service .getUsersByLogin(null, 12826, 26490481, 36717908, 19571641))","description":"","keywords":[],"ref":"/wiki/basic-tutorials/api/","tags":null,"title":"API - Kraken and Helix","weight":-100},{"category":"getting-started","content":" Before Starting Download Java Development Kit (JDK) Install it and configure environmental variables: JAVA_HOME if not exist, create and adding to PATH - $JAVA_HOME/bin.\n JDK8. JDK11.  Integrated Development Environment (IDE) Download Editions Comparison IntelliJ IDEA is a special programming environment or Integrated Development Environment (IDE) largely meant for Java. This environment is used especially for the development of programs. It is developed by a company called JetBrains, which was formally called IntelliJ. It is available in two editions: the Community Edition which is licensed by Apache 2.0, and a commercial edition known as the Ultimate Edition. Both of them can be used for creating software which can be sold. What makes IntelliJ IDEA so different from its counterparts is its ease of use, flexibility and its solid design.\nSetup Soon :tm:\n","description":"","keywords":[],"ref":"/wiki/getting-started/intellij/","tags":null,"title":"IntelliJ Setup","weight":-100},{"category":"miscellaneous","content":" What is this? Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java. Never write another getter or equals method again. Early access to future java features such as val, and much more.\nWhy Project Lombok? Project Lombok is used to reduce boilerplate code for model/data objects, e.g., it can generate getters and setters for those object automatically by using Lombok annotations.\nInstalling Project Lombok Intellij Community provides a Lombok Plugin into all of IntelliJ platform. Click Here to download them. Or install using Plugins Manager.\n Go to File \u0026gt; Settings and Plugins tab. Type in marketplace Lombok Plugin. Install it and restart IDE.\n Eclipse Install it using installer. Click to download\nThe JAR file is launchable, so just only dobule-clicking them to open it.\n Follow the instructions on the screen. Add JVM args into eclipse.ini (this file is in installed source directory) file if you have possibilities. If it is exist you can proceed to next step, when it is a importing our project. Sometimes it is not necessarily because Lombok installer adding them into the eclipse.ini file. It\u0026rsquo;s up to you.\n-vmargs -javaagent:lombok.jar   Netbeans The Netbeans editor is compatible with lombok.\n Add Lombok to the project libraries. In the project properties, in the section Build \u0026gt; Compiling, check the Enable Annotation Processing in Editor checkbox.  ","description":"","keywords":[],"ref":"/wiki/miscellaneous/project-lombok/","tags":null,"title":"Project Lombok","weight":-100},{"category":"faq","content":"Soom :tm:\n","description":"","keywords":[],"ref":"/wiki/faq/rate-limit/","tags":null,"title":"Rate Limit Policy/FAQ","weight":-100},{"category":"miscellaneous","content":" Ways to get Access Token and Refresh Token There is 2 options to get this things done\n Using twitchtokengenerator.com (by: @swiftyspiffy) Your Custom OAuth2 Server  Use twitchtokengenerator.com Just get in there and follow the instructions on the screeen.\nUse OAuth2 Server Soon :tm:\n","description":"","keywords":[],"ref":"/wiki/miscellaneous/bot-account/","tags":null,"title":"Bot Account","weight":0},{"category":"faq","content":" glitch-chat is currently supporting with glitch-kraken. It will be possibly adding glitch-helix support? Currently Twitch doesn\u0026rsquo;t even have planning removes Kraken forever. In 01/01/19 Kraken endpoint will supporting only v5 - v3 will be removed. The anwser is Yes, but not yet.\nHow can I increase limits for my chatbot? Filling this application will they marks to is_known_bot. And applicable bot account must have 2FA active.\nWhy your library is not working? It is a bug? If you found issue, please ship this information here, provinding some more details. Also you can ship it into our Discord (link below).\n","description":"","keywords":[],"ref":"/wiki/faq/general/","tags":null,"title":"General FAQ","weight":0},{"category":"basic-tutorials","content":" All endpoints will returns a Mono or Flux response. Other way will be commented inside the example.  Initialization Client For starting initialization GlitchClient we need a client_id and client_secret to this important creation process. How to get them, you will find out over here.\nGlitchClient client = GlitchClient.builder() .clientId(\u0026#34;\u0026lt;client_id\u0026gt;\u0026#34;) .clientSecret(\u0026#34;\u0026lt;client_secret\u0026gt;\u0026#34;) .credentialStorage(new MyCredentialStorage()) // a custom implementation of CredentialStorage  .defaultScopes(Scope.USER_READ) .build(); // or .buildAsync() when returns Mono\u0026lt;GlitchClient\u0026gt; Authorize User GlitchClient provides OAuth client ready for implementation to your server. Examples below shows how to using them propertly.\nGetting from Storage Everytime when you executing create() or buildFromCredentials() methods from CredentialManager will automatically add your Credential to credential Storage.\nGetting user by name For getting users with ignore case or soemthing else, please take a look more details about Regular Expressions  client.getCredentialManager().getCredentialStorage().getByLogin(\u0026#34;^(?i:twitch)\u0026#34;); Register a new Credential To creating credential you need a access_token and refresh_token.\nclient.getCredentialManager().buildFromCredentials(\u0026#34;\u0026lt;access_token\u0026gt;\u0026#34;, \u0026#34;\u0026lt;refresh_token\u0026gt;\u0026#34;); Authorizing user This library support only Authorization Code Flow  To authorizing user via OAuth2 we need provide base_url of your service and code (from your query parameter) when it is authorization code for creating your credentials.\nclient.getCredentialManager().create(\u0026#34;\u0026lt;code\u0026gt;\u0026#34;, \u0026#34;\u0026lt;base_url\u0026gt;\u0026#34;);","description":"","keywords":[],"ref":"/wiki/basic-tutorials/client/","tags":null,"title":"Intialize Client","weight":0},{"category":"getting-started","content":" Introduction Welcome to the Glitch wiki! You can find all important threads on the right side of the page.\nDownload / Installation We shall recommend use a build managers, like a Gradle or Maven.\nIf you don\u0026rsquo;t have familiar with those build managers, you can follow on the setup guides or download Glitch directly via Bintray repository\nDependency Gradle - Groovy DSL plugins { id \u0026#34;io.spring.dependency-management\u0026#34; version \u0026#34;1.0.6.RELEASE\u0026#34; } repositories { jcenter() maven { url \u0026#34;https://dl.bintray.com/stachu540/GlitchLib\u0026#34; } } dependencyManagement { imports { mavenBom \u0026#34;io.glitchlib:glitch-BOM:$glitch_version\u0026#34; } } dependencies { compile \u0026#34;io.glitchlib:glitch-core\u0026#34; compile \u0026#34;io.glitchlib:glitch-kraken\u0026#34; } Gradle - Kotlin DSL plugins { id(\u0026#34;io.spring.dependency-management\u0026#34;) version \u0026#34;1.0.6.RELEASE\u0026#34; } repositories { jcenter() maven(\u0026#34;https://dl.bintray.com/stachu540/GlitchLib\u0026#34;) } configure\u0026lt;DependencyManagementExtension\u0026gt; { imports { mavenBom(\u0026#34;io.glitchlib:glitch-BOM:$glitch_version\u0026#34;) } } dependencies { compile(\u0026#34;io.glitchlib:glitch-core\u0026#34;) compile(\u0026#34;io.glitchlib:glitch-kraken\u0026#34;) } Maven \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;GlitchLib\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://dl.bintray.com/stachu540/GlitchLib\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.glitchlib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;glitch-BOM\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${glitch.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.glitchlib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;glitch-core\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.glitchlib\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;glitch-kraken\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; IDE Setup If you’ve never used Gradle or Maven before, you should take a look at the setup tutorial:\n IntelliJ (recommended) Eclipse Netbeans  Support Glitch and Twitch API Discord\u0026rsquo;s is an excellent place if you have questions about the library.\nExamples  Client Chat PubSub Kraken/Helix  ","description":"","keywords":[],"ref":"/wiki/getting-started/welcome/","tags":null,"title":"Welcome","weight":0}]